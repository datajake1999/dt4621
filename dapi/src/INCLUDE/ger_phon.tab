/*
 ***********************************************************************
 *
 *                           Copyright ©
 *	  Copyright © 2000 Force Computers, Inc., a Solectron Company. All rights reserved.
 *    © Digital Equipment Corporation 1995. All rights reserved.
 *
 *    Restricted Rights: Use, duplication, or disclosure by the U.S.
 *    Government is subject to restrictions as set forth in subparagraph
 *    (c) (1) (ii) of DFARS 252.227-7013, or in FAR 52.227-19, or in FAR
 *    52.227-14 Alt. III, as applicable.
 *
 *    This software is proprietary to and embodies the confidential
 *    technology of Force Computers Incorporated and other parties.
 *    Possession, use, or copying of this software and media is authorized
 *    only pursuant to a valid written license from Force or an
 *    authorized sublicensor.
 *
 ***********************************************************************
 *    File Name:        ger_phon.tab
 *    Author:
 *    Creation Date:
 *
 *    Functionality:
 *
 ***********************************************************************
 *    Revision History:
 *    
 *	001	3/27/96   	GL  	0x61 in the reverse table should be (A) instead
 *                 		    (AH)
 *  002	6/29/98   	GL    	BATS#702 add DOUBLCONS marker "&"
 *  003	04/13/2000	MGS		Changes for integrated phoneme set 
 *  004 10/16/00	CAB		Changed copyright info
 *  005 2/21/01		EAB		Added in new short vowels phonemes and correct rev_asci errors in table. 
 */



unsigned char german_ascky[] =  {

/* allophones */

	'_',    'a',    'E',    'V',    '@',    'I',    'c',    'Q', 
	'U',    'Y',    '1',    '2',    '7',    '3',    '4',    'q',
	'5',    '6',    'A',    'W',    'H',    '8',    '^',    '9',
	'%',    'j',    'l',    'r',    'R',    'h',    'm',    'n',
	'G',    'L',    'M',    'N',    'f',    'v',    's',    'z',
	'S',    'Z',    'x',    'X',    'p',    'b',    't',    'd',
	'k',    'g',    '|',    'P',    'T',    'J',    'C',    '?',
	'i',    'e',    'o',    'u',    'y', 

/* place holders for null range */

	     0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,

/* control */

	'~',    '=',    '`',    '\'',   '"',	'/',	'\\',	'<',	
	'-',    '*',    '#',    ' ',    '(',    ')',    ';',    ',',
	'.',    '?',    '!',    '+',    '^',    '&',	'>'
};
#ifndef VMS
unsigned int german_ascky_rev[] = {

/* 0x00 */

	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     PGR(WBOUND),    NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,

/* 0x10 */

	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,

/* 0x20 */

	PGR(WBOUND),    PGR(EXCLAIM),   PGR(SEMPH),     PGR(HYPHEN),
	NULL_ASCKY,     PGR(GR_ON),        NULL_ASCKY,     PGR(S1),
	PGR(PPSTART),   PGR(VPSTART),   PGR(MBOUND),    PGR(NEW_PARAGRAPH),
	PGR(COMMA),     PGR(SBOUND),    PGR(PERIOD),    PGR(HAT_RISE),

/* 0x30 */

	PGR(GR_ON),        PGR(GR_AH),        PGR(GR_EH),        PGR(GR_IH),
	PGR(GR_OH),        PGR(GR_UH),        PGR(GR_UEH),        PGR(GR_AEH),
	PGR(GR_AN),        PGR(GR_UM),        PITCH_CHANGE,      PGR(RELSTART),
	PGR(HAT_RF),       PGR(S3),           NULL_ASCKY,        PGR(QUEST),

/* 0x40 */

	PGR(GR_EX),        PGR(GR_EI),        NULL_ASCKY /*PGR(GR_B)*/,         PGR(GR_TJ),
	NULL_ASCKY/*PGR(GR_D)*/,         PGR(GR_E),         NULL_ASCKY /*PGR(GR_F)*/,         PGR(GR_NG),
	PGR(GR_EU),        PGR(GR_I),         PGR(GR_DJ),        NULL_ASCKY/*PGR(GR_K)*/,
	PGR(GR_EL),        PGR(GR_EM),        PGR(GR_EN),        NULL_ASCKY/*PGR(GR_O)*/,

/* 0x50 */

	PGR(GR_PF),        PGR(GR_OE),        PGR(GR_R),         PGR(GR_SH),
	PGR(GR_TS),        PGR(GR_U),         PGR(GR_AE),        PGR(GR_AU),
	PGR(GR_KH),        PGR(GR_UE),        PGR(GR_ZH),        NULL_ASCKY,
	PGR(S1),        NULL_ASCKY,     PGR(GR_IM),        PGR(SIL),

/* 0x60 */
	
	PGR(S2),		   PGR(GR_A),         PGR(GR_B),         PGR(GR_O),
	PGR(GR_D),         PGR(GR_EH),        PGR(GR_F),         PGR(GR_G),
	PGR(GR_H),         PGR(GR_I1),        PGR(GR_J),         PGR(GR_K),
	PGR(GR_L),         PGR(GR_M),         PGR(GR_N),         PGR(GR_O1),

/* 0x70 */
	
	PGR(GR_P),         PGR(GR_OEH),       PGR(GR_RR),                PGR(GR_S),
	PGR(GR_T),         PGR(GR_U1),        PGR(GR_V),                 NULL_ASCKY,
	PGR(GR_CH),        PGR(GR_Y1),       PGR(GR_Z),                 NULL_ASCKY,
	PGR(GR_Q),         NULL_ASCKY,     PGR(BLOCK_RULES),       NULL_ASCKY
};
#endif
unsigned char   german_arpa[] = {

	'_',    ' ',           /* 0  =  _ */            
	'a',    ' ',           /* 1   =  a */
	'e',    ' ',           /* 2   =  E */
	'a',    'e',           /* 3   =  V */
	'e',    'x',           /* 4   =  @ */
	'i',    ' ',           /* 5   =  I */
	'o',    ' ',           /* 6   =  c */
	'o',    'e',           /* 7   =  Q */
	'u',    ' ',           /* 8   =  U */
	'u',    'e',           /* 9   =  Y */
	'a',    'h',           /* 10   = 1 */
	'e',    'h',           /* 11   = 2 */
	'a',    'z',           /* 12   = 7 */
	'i',    'h',           /* 13   = 3 */
	'o',    'h',           /* 14   = 4 */
	'o',    'z',           /* 15   = q */
	'u',    'h',           /* 16   = 5 */
	'u',    'z',           /* 17   = 6 */
	'e',    'i',           /* 18   = A */
	'a',    'u',           /* 19   = W */
	'e',    'u',           /* 20   = H */
	'a',    'n',           /* 21   = 8 */
	'i',    'm',           /* 22   = ^ */
	'u',    'm',           /* 23   = 9 */
	'o',    'n',           /* 24   = % */
	'j',    ' ',           /* 25   = j */
	'l',    ' ',           /* 26   = l */
	'r',    'r',           /* 27   = r */
	'r',    ' ',           /* 28   = R */
	'h',    ' ',           /* 29   = h */
	'm',    ' ',           /* 30   = m */
	'n',    ' ',           /* 31   = n */
	'n',    'g',           /* 32   = G */
	'e',    'l',           /* 33   = L */
	'e',    'm',           /* 34   = M */
	'e',    'n',           /* 35   = N */
	'f',    ' ',           /* 36   = f */
	'v',    ' ',           /* 37   = v */
	's',    ' ',           /* 38   = s */
	'z',    ' ',           /* 39   = z */
	's',    'h',           /* 40   = S */
	'z',    'h',           /* 41   = Z */
	'c',    'h',           /* 42   = x */
	'k',    'h',           /* 43   = X */
	'p',    ' ',           /* 44   = p */
	'b',    ' ',           /* 45   = b */
	't',    ' ',           /* 46   = t */
	'd',    ' ',           /* 47   = d */
	'k',    ' ',           /* 48   = k */
	'g',    ' ',           /* 49   = g */
	'q',    ' ',           /* 50   = | */
	'p',    'f',           /* 51   = P */
	't',    's',           /* 52   = T */
	'd',    'j',           /* 53   = J */
	't',    'j',           /* 54   = C */
	'k',    's',           /* 55   = ? */
		   
/* place holders for null range */

	'i', '1',              /* 56  = i */
	'e', '1',              /* 57  = e */
	'o', '1',              /* 58  = o  */
	'u', '1',              /* 59  = u */

	'y', '1',              /* 60  = y */
	0,      0,             /* 61  = */
	0,      0,             /* 62  = */
	0,      0,             /* 63  = */
	0,      0,             /* 64  = */
	0,      0,             /* 65  = */
	0,      0,             /* 66  = */
	0,      0,             /* 67  = */
	0,      0,             /* 68  = */
	0,      0,             /* 69  = */

	0,      0,             /* 70  = */
	0,      0,             /* 71  = */
	0,      0,             /* 72  = */
	0,      0,             /* 73  = */
	0,      0,             /* 74  = */
	0,      0,             /* 75  = */
	0,      0,             /* 76  = */
	0,      0,             /* 77  = */
	0,      0,             /* 78  = */
	0,      0,             /* 79  = */

	0,      0,             /* 80  = */
	0,      0,             /* 81  = */
	0,      0,             /* 82  = */
	0,      0,             /* 83  = */
	0,      0,             /* 84  = */
	0,      0,             /* 85  = */
	0,      0,             /* 86  = */
	0,      0,             /* 87  = */
	0,      0,             /* 88  = */
	0,      0,             /* 89  = */

	0,      0,             /* 90  = */
	0,      0,             /* 91  = */
	0,      0,             /* 92  = */
	0,      0,             /* 93  = */
	0,      0,             /* 94  = */
	0,      0,             /* 95  = */
	0,      0,             /* 96  = */
	0,      0,             /* 97  = */
	0,      0,             /* 98  = */
	0,      0,             /* 99  = */

	'~',	' ',	/* BLOCK_RULES =	~	*/
	'=',	' ',	/* S3 =  			=	*/
	'`',	' ',	/* S2 = 			` 	*/
	'\'',	' ',	/* S1 =				' 	*/
	'\"',	' ',	/* SEMPH =			"   */
	'/',	' ',	/* HAT_RISE  = 		/	*/
	'\\',	' ',	/* HAT_FALL  = 		\	*/
	'/',	'\\',	/* HAT_RF  = 		<	*/
	'-',	' ',	/* SBOUND  =		-	*/
	'*',	' ',	/* MBOUND  = 		*	*/
	'#',	' ',	/* HYPHEN  = 		#	*/
	' ',	' ',	/* WBOUND  = 	 		*/
	'(',	' ',	/* PPSTART =		(	*/
	')',	' ',	/* VPSTART = 		)	*/
	';',	' ',	/* RELSTART  = 		;	*/
	',',	' ',	/* COMMA  =			,	*/
	'.',	' ',	/* PERIOD =			.	*/
	'?',	' ',	/* QUEST  =			?	*/
	'!',	' ',	/* EXCLAIM  = 		!	*/
	'+',	' ',	/* NEW_PARAGRAPH =	+	*/
	'^',	' ',	/* SPECIALWORD =	^	*/
	'&',	' ',	/* LINKRWORD =		&	*/
	'>',	' '		/* DOUBLCONS =		>	*/
};			       

