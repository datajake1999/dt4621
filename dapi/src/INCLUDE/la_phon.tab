/*
 ***********************************************************************
 *
 *                           Copyright ©
 *	  Copyright © 2000-2001 Force Computers Inc., a Solectron company. All rights reserved.
 *    © Digital Equipment Corporation 1995. All rights reserved.
 *
 *    Restricted Rights: Use, duplication, or disclosure by the U.S.
 *    Government is subject to restrictions as set forth in subparagraph
 *    (c) (1) (ii) of DFARS 252.227-7013, or in FAR 52.227-19, or in FAR
 *    52.227-14 Alt. III, as applicable.
 *
 *    This software is proprietary to and embodies the confidential
 *    technology of Force Computers Incorporated and other parties.
 *    Possession, use, or copying of this software and media is authorized
 *    only pursuant to a valid written license from Force or an
 *    authorized sublicensor.
 *
 ***********************************************************************
 *    File Name:	la_phon.tab
 *    Author:
 *    Creation Date:
 *
 *    Functionality:
 *
 ***********************************************************************
 *    Revision History:
 *  001	CJL		02/08/1995	Added code to exclude multiple
 *							inclusions and included spa_def.h
 *	002	MFG		06/19/1998	Cpoied from file spa_phon.tab to support latin american 
 *	003	GL		11/03/1998	BATS#785 use "v" instead of "V" for LA_V in ascky symbol 
 *	004	GL		11/19/1998	BATS#825 add "S2" support in reverse ascky table 
 * 	005	MGS		04/13/2000	Changes for integrated phoneme set 
 *	006	CAB		01/19/2001	Fixed copyright info
 */

#ifndef LA_PHONTAB
#define LA_PHONTAB 1

#include "la_def.h"

unsigned char la_ascky[] = {

/* allophones */

	'_',    'a',    'e',    'i',    'o',    'u',    'W',    'Y',
	'R',    'l',    'L',    'm',    'n',    '1',    'f',    's',
	'j',    'T',    'B',    'D',    'G',    '2',    'p',    'b',
	't',    'd',    'k',    'g',    'C',    'y',    'r',    'q',
	'z',    'w',    'N',    'v',    'I',    'M',    'P',    

/* place holders for null range */

	0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,

/* control phones */

	'~',    '=',    '`',    '\'',   '"',	'/',	'\\',	'<',	
	'-',    '*',    '#',    ' ',    '(',    ')',    ';',    ',',
	'.',    '?',    '!',    '+',	'^' ,	'&',	'>'
};

unsigned int la_ascky_rev[] = {

/* 0x00 */

	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     PLA(WBOUND),   NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,

/* 0x10 */

	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,

/* 0x20 */

	PLA(WBOUND),   PLA(EXCLAIM),  PLA(SEMPH),    PLA(HYPHEN),
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     PLA(S1),
	PLA(PPSTART),  PLA(VPSTART),  PLA(MBOUND),   PLA(NEW_PARAGRAPH),
	PLA(COMMA),    PLA(SBOUND),   PLA(PERIOD),   PLA(HAT_RISE),

/* 0x30 */

	NULL_ASCKY,     PLA(LA_NH),     PLA(LA_YH),     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     PITCH_CHANGE,   PLA(RELSTART),
	PLA(HAT_RF),   PLA(S3),       NULL_ASCKY,     PLA(QUEST),

/* 0x40 */

	NULL_ASCKY,     NULL_ASCKY,     PLA(LA_BH),     PLA(LA_CH),     
	PLA(LA_DH),     NULL_ASCKY,     NULL_ASCKY,     PLA(LA_GH),     
	NULL_ASCKY,     PLA(LA_IX),     NULL_ASCKY,     NULL_ASCKY,
	PLA(LA_LL),     PLA(LA_MX),     PLA(LA_NX),     NULL_ASCKY,

/* 0x50 */

	PLA(LA_PH),     NULL_ASCKY,     PLA(LA_RR),     NULL_ASCKY,
	PLA(LA_TH),     NULL_ASCKY,     NULL_ASCKY,     PLA(LA_WX),     
	NULL_ASCKY,     PLA(LA_YX),     NULL_ASCKY,     NULL_ASCKY,
	PLA(S1),       NULL_ASCKY,     NULL_ASCKY,     PLA(SIL),

/* 0x60 */
	
	PLA(S2),       PLA(LA_A),      PLA(LA_B),      NULL_ASCKY,
	PLA(LA_D),      PLA(LA_E),      PLA(LA_F),      PLA(LA_G),      
	NULL_ASCKY,     PLA(LA_I),      PLA(LA_J),      PLA(LA_K),      
	PLA(LA_L),      PLA(LA_M),      PLA(LA_N),      PLA(LA_O),      

/* 0x70 */
	
	PLA(LA_P),      PLA(LA_Q),      PLA(LA_R),              PLA(LA_S),      
	PLA(LA_T),      PLA(LA_U),      PLA(LA_V),              PLA(LA_W),              
	NULL_ASCKY,     PLA(LA_Y),      PLA(LA_Z),              NULL_ASCKY,
	NULL_ASCKY,     NULL_ASCKY,     PLA(BLOCK_RULES),      NULL_ASCKY
};


unsigned char   la_arpa[] = {

	'_',    ' ',           /* 0  =  _ */            
	'a',    ' ',           /* 1  =  a */
	'e',    ' ',           /* 2  =  e */
	'i',    ' ',           /* 3  =  i */
	'o',    ' ',           /* 4  =  o */
	'u',    ' ',           /* 5  =  u */
	'w',    'x',           /* 6  =  W */
	'y',    'x',           /* 7  =  Y */
	'r',    'r',           /* 8  =  R */
	'l',    ' ',           /* 9  =  l */

	'l',    'l',           /* 10  =  L */
	'm',    ' ',           /* 11  =  m */
	'n',    ' ',           /* 12  =  n */
	'n',    'h',           /* 13  =  1 */
	'f',    ' ',           /* 14  =  f */
	's',    ' ',           /* 15  =  s */
	'j',    ' ',           /* 16  =  j */
	't',    'h',           /* 17  =  T */
	'b',    'h',           /* 18  =  B */
	'd',    'h',           /* 19  =  D */

	'g',    'h',           /* 20  = G */
	'y',    'h',           /* 21  = 2 */
	'p',    ' ',           /* 22  = p */
	'b',    ' ',           /* 23  = b */
	't',    ' ',           /* 24  = t */
	'd',    ' ',           /* 25  = d */
	'k',    ' ',           /* 26  = k */
	'g',    ' ',           /* 27  = g */
	'c',    'h',           /* 28  = C */
	'y',    ' ',           /* 29  = y */

	'r',    ' ',           /* 30  = r */
	'q',    ' ',           /* 31  = q */
	'z',    ' ',           /* 32  = z */
	'w',    ' ',           /* 33  = w */
	'n',    'x',           /* 34  = N */
	'v',    ' ',           /* 35  = v */
	'i',    'x',           /* 36  = I */
	'm',    'x',           /* 37  = M */
	'p',    'h',           /* 38  = P */
	0,      0,             /* 39  = */

	0,      0,             /* 40  = */
	0,      0,             /* 41  = */
	0,      0,             /* 42  = */
	0,      0,             /* 43  = */
	0,      0,             /* 44  = */
	0,      0,             /* 45  = */
	0,      0,             /* 46  = */
	0,      0,             /* 47  = */
	0,      0,             /* 48  = */
	0,      0,             /* 49  = */

	0,      0,             /* 50  = */
	0,      0,             /* 51  = */
	0,      0,             /* 52  = */
	0,      0,             /* 53  = */
	0,      0,             /* 54  = */
	0,      0,             /* 55  = */
	0,      0,             /* 56  = */
	0,      0,             /* 57  = */
	0,      0,             /* 58  = */
	0,      0,             /* 59  = */

	0,      0,             /* 60  = */
	0,      0,             /* 61  = */
	0,      0,             /* 62  = */
	0,      0,             /* 63  = */
	0,      0,             /* 64  = */
	0,      0,             /* 65  = */
	0,      0,             /* 66  = */
	0,      0,             /* 67  = */
	0,      0,             /* 68  = */
	0,      0,             /* 69  = */

	0,      0,             /* 70  = */
	0,      0,             /* 71  = */
	0,      0,             /* 72  = */
	0,      0,             /* 73  = */
	0,      0,             /* 74  = */
	0,      0,             /* 75  = */
	0,      0,             /* 76  = */
	0,      0,             /* 77  = */
	0,      0,             /* 78  = */
	0,      0,             /* 79  = */

	0,      0,             /* 80  = */
	0,      0,             /* 81  = */
	0,      0,             /* 82  = */
	0,      0,             /* 83  = */
	0,      0,             /* 84  = */
	0,      0,             /* 85  = */
	0,      0,             /* 86  = */
	0,      0,             /* 87  = */
	0,      0,             /* 88  = */
	0,      0,             /* 89  = */

	0,      0,             /* 90  = */
	0,      0,             /* 91  = */
	0,      0,             /* 92  = */
	0,      0,             /* 93  = */
	0,      0,             /* 94  = */
	0,      0,             /* 95  = */
	0,      0,             /* 96  = */
	0,      0,             /* 97  = */
	0,      0,             /* 98  = */
	0,      0,             /* 99  = */


	'~',	' ',	/* BLOCK_RULES =	~	*/
	'=',	' ',	/* S3 =  			=	*/
	'`',	' ',	/* S2 = 			` 	*/
	'\'',	' ',	/* S1 =				' 	*/
	'\"',	' ',	/* SEMPH =			"   */
	'/',	' ',	/* HAT_RISE  = 		/	*/
	'\\',	' ',	/* HAT_FALL  = 		\	*/
	'/',	'\\',	/* HAT_RF  = 		<	*/
	'-',	' ',	/* SBOUND  =		-	*/
	'*',	' ',	/* MBOUND  = 		*	*/
	'#',	' ',	/* HYPHEN  = 		#	*/
	' ',	' ',	/* WBOUND  = 	 		*/
	'(',	' ',	/* PPSTART =		(	*/
	')',	' ',	/* VPSTART = 		)	*/
	';',	' ',	/* RELSTART  = 		;	*/
	',',	' ',	/* COMMA  =			,	*/
	'.',	' ',	/* PERIOD =			.	*/
	'?',	' ',	/* QUEST  =			?	*/
	'!',	' ',	/* EXCLAIM  = 		!	*/
	'+',	' ',	/* NEW_PARAGRAPH =	+	*/
	'^',	' ',	/* SPECIALWORD =	^	*/
	'&',	' ',	/* LINKRWORD =		&	*/
	'>',	' '		/* DOUBLCONS =		>	*/
};			       

#endif

