/*
 ***********************************************************************
 *
 *                           Copyright ©
 *    Copyright © 2000 Force Computers Inc., a Solectron company. All rights reserved.
 *    © Digital Equipment Corporation 1995. All rights reserved.
 *
 *    Restricted Rights: Use, duplication, or disclosure by the U.S.
 *    Government is subject to restrictions as set forth in subparagraph
 *    (c) (1) (ii) of DFARS 252.227-7013, or in FAR 52.227-19, or in FAR
 *    52.227-14 Alt. III, as applicable.
 *
 *    This software is proprietary to and embodies the confidential
 *    technology of Force Computers Incorporated and other parties.
 *    Possession, use, or copying of this software and media is authorized
 *    only pursuant to a valid written license from Force or an
 *    authorized sublicensor.

 *
 ***********************************************************************
 *    File Name:	fr_phon.tab
 *    Author:
 *    Creation Date:
 *
 *    Functionality:
 * phonemic character set conversions ... included into fre_main.c 
 *
 ***********************************************************************
 *    Revision History:
 *  001 9/15/95  gl 	modified to improve french 
 *  002 10/16/00 CAB	Changed copyright info
 */


unsigned char french_ascky[] =   {

/* allophones */

	 0,     'a',    0xe0,   0xee,   0xe5,   0xe9,   'e',    0xed,
	'i',    'o',    0xec,   'u',    'y',    0xe2,   0xe8,   0xeb,
	0xea,   'h',    'l',    0xe7,   'w',    0xe6,   'j',    0xf4,
	'f',    0xe4,   'x',    's',    'v',    'z',    'b',    'd',
	'g',    'k',    'p',    't',    0xef,   'm',    'n',    0xe3,
	 0,      0,      0,      0,      0,      0,      0,      0,
	 0,      0,      0,      0,      0,      0,      0,      0,



/* place holders for null range */
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,      0,      0,      0,      0,
	0,      0,      0,      0,

/* control */

    '~',    '=',    '`',    '\'',   '"',    '/',    '\\',   '<',    
    '-',    '*',    '#',    ' ',    '(',    ')',    ';',    ',',
    '.',    '?',    '!',    '+' ,   '^' 
};



unsigned int french_ascky_rev[] = {

/* 0x00 */
    NULL_ASCKY, NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY, NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY, PFRE(WBOUND),   NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY, NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	  
/* 0x10 */          
    NULL_ASCKY, NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY, NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY, NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY, NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
	  
/* 0x20 */          
    PFRE(WBOUND),   PFRE(EXCLAIM),  PFRE(SEMPH),    PFRE(HYPHEN),
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     PFRE(S1),
    PFRE(PPSTART),  PFRE(VPSTART),  PFRE(MBOUND),   PFRE(NEW_PARAGRAPH),
    PFRE(COMMA),    PFRE(SBOUND),   PFRE(PERIOD),   PFRE(HAT_RISE),
	  
/* 0x30 */          
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PITCH_CHANGE,   PFRE(RELSTART),
    PFRE(HAT_RF),   PFRE(S3),       NULL_ASCKY,     PFRE(QUEST),
	  
/* 0x40 */          
    NULL_ASCKY,     PFRE(F_A),		PFRE(F_B),		NULL_ASCKY,
    PFRE(F_D),		PFRE(F_E1),		PFRE(F_F),		PFRE(F_G),
    PFRE(F_AP),		PFRE(F_I),		PFRE(F_Y),		PFRE(F_K),
    PFRE(F_L),		PFRE(F_M),		PFRE(F_N),		PFRE(F_O),
	  
/* 0x50 */          
    PFRE(F_P),		NULL_ASCKY,     NULL_ASCKY,     PFRE(F_S),
    PFRE(F_T),		PFRE(F_OU),		PFRE(F_V),		PFRE(F_W),
    PFRE(F_RX),		PFRE(F_U),		PFRE(F_Z),		NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,     PFRE(SIL),
	      
/* 0x60 */          
    PFRE(S2),       PFRE(F_A),		PFRE(F_B),		NULL_ASCKY,
    PFRE(F_D),		PFRE(F_E1),		PFRE(F_F),		PFRE(F_G),
    PFRE(F_AP),		PFRE(F_I),		PFRE(F_Y),		PFRE(F_K),
    PFRE(F_L),		PFRE(F_M),		PFRE(F_N),		PFRE(F_O),
	  
/* 0x70 */                                          
    PFRE(F_P),		NULL_ASCKY,		NULL_ASCKY,		PFRE(F_S),
    PFRE(F_T),		PFRE(F_OU),		PFRE(F_V),      PFRE(F_W),
    PFRE(F_RX),		PFRE(F_U),		PFRE(F_Z),      NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,

/* 0x80 */          
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,
    
/* 0x90 */          
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,
    
/* 0xA0 */          
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,
    
/* 0xB0 */          
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,
    
/* 0xC0 */          
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,    
    
/* 0xD0 */                                                         
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,
    
/* 0xE0 */          
    PFRE(F_A3),		NULL_ASCKY,     PFRE(F_AN),			PFRE(F_NG),
    PFRE(F_J),		PFRE(F_AU),		PFRE(F_WU),			PFRE(F_R),
    PFRE(F_IN),		PFRE(F_E),		PFRE(F_UN),			PFRE(F_ON),
    PFRE(F_O6),		PFRE(F_EU),		PFRE(F_E2),			PFRE(F_GN),
    
/* 0xF0 */                                                         
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    PFRE(F_CH),		NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     NULL_ASCKY,         NULL_ASCKY,
    NULL_ASCKY,     NULL_ASCKY,     PFRE(BLOCK_RULES),  NULL_ASCKY,                                                                   
								   
};

/*
 *  string to arpabet conversion ...
 */

unsigned char   french_arpa[] = {

    '_',    ' ',
    'a',    ' ',
    'a',    '3',
    'e',    '2',
    'a',    'u',
    'e',    ' ',
    'e',    '1',
    'e',    'u',
    'i',    ' ',
    'o',    ' ',
    'o',    '6',
    'o',    'u',
    'u',    ' ',
    'a',    'n',
    'i',    'n',
    'o',    'n',
    'u',    'n',
    'a',    'p',

    'l',    ' ',
    'r',    ' ',
    'w',    ' ',
    'w',    'u',
    'y',    ' ',
    'c',    'h',
    'f',    ' ',
    'j',    ' ',
    'r',    'x',
    's',    ' ',
    'v',    ' ',
    'z',    ' ',
    'b',    ' ',
    'd',    ' ',
    'g',    ' ',            /* Dentalized "d".      */
    'k',    ' ',
    'p',    ' ',
    't',    ' ',
    'g',    'n',
    'm',    ' ',
    'n',    ' ',
    'n',    'g',
    's',    'g',
    '_',    ' ',
/* place holders for null range */

    0,  0,         /* 42  = */
    0,  0,         /* 43  = */
    0,  0,         /* 44  = */
    0,  0,         /* 45  = */
    0,  0,         /* 46  = */
    0,  0,         /* 47  = */
    0,  0,         /* 48  = */
    0,  0,         /* 49  = */
    0,  0,         /* 50  = */
    0,  0,         /* 51  = */
    0,  0,         /* 52  = */
    0,  0,         /* 53  = */
    0,  0,         /* 54  = */
    0,  0,         /* 55  = */
    0,  0,         /* 56  = */
    0,  0,         /* 57  = */
    0,  0,         /* 58  = */
    0,  0,         /* 59  = */

    0,  0,         /* 60  = */
    0,  0,         /* 61  = */
    0,  0,         /* 62  = */
    0,  0,         /* 63  = */
    0,  0,         /* 64  = */
    0,  0,         /* 65  = */
    0,  0,         /* 66  = */
    0,  0,         /* 67  = */
    0,  0,         /* 68  = */
    0,  0,         /* 69  = */

    0,  0,         /* 70  = */
    0,  0,         /* 71  = */
    0,  0,         /* 72  = */
    0,  0,         /* 73  = */
    0,  0,         /* 74  = */
    0,  0,         /* 75  = */
    0,  0,         /* 76  = */
    0,  0,         /* 77  = */
    0,  0,         /* 78  = */
    0,  0,         /* 79  = */

    0,  0,         /* 80  = */
    0,  0,         /* 81  = */
    0,  0,         /* 82  = */
    0,  0,         /* 83  = */
    0,  0,         /* 84  = */
    0,  0,         /* 85  = */
    0,  0,         /* 86  = */
    0,  0,         /* 87  = */
    0,  0,         /* 88  = */
    0,  0,         /* 89  = */

    0,  0,         /* 90  = */
    0,  0,         /* 91  = */
    0,  0,         /* 92  = */
    0,  0,         /* 93  = */
    0,  0,         /* 94  = */
    0,  0,             /* 95  = */
    0,  0,         /* 96  = */
    0,  0,         /* 97  = */
    0,  0,         /* 98  = */
    0,  0,         /* 99  = */


    '~',    ' ',           /* BLOCK_RULES =  ~  */
    '=',    ' ',           /* S3 =       =  */
    '`',    ' ',           /* S2 =       `  */
    '\'',   ' ',           /* S1 =       '  */
    '\"',   ' ',           /* SEMPH =    "  */
    '/',    ' ',           /* HAT_RISE  =    /  */
    '\\',   ' ',           /* HAT_FALL  =    \  */
    '/',    '\\',          /* HAT_RF  =      <  */
    '-',    ' ',           /* SBOUND  =  -   */
    '*',    ' ',           /* MBOUND  =      *  */

    '#',    ' ',           /* HYPHEN  =      #  */
    ' ',    ' ',           /* WBOUND  =         */
    '(',    ' ',           /* PPSTART =      (  */
    ')',    ' ',           /* VPSTART =      )  */
    ';',    ' ',           /* RELSTART  =    ;  */
    ',',    ' ',           /* COMMA  =   ,  */
    '.',    ' ',           /* PERIOD =   .  */
    '?',    ' ',           /* QUEST  =   ?  */
    '!',    ' ',           /* EXCLAIM  =     !  */
    '+',    ' ',           /* NEW_PARAGRAPH = +     */
    '^',    ' '
    };                 

